"use client"

import { useState, useEffect } from "react"
import { Link } from "react-router-dom"
import "./ai-connect-page.css"
import doNgocMinhAvatar from "../assets/do_ngoc_minh_avatar.jpg";
import kieuBaoTramAvatar from "../assets/kieu_bao_tram_avatar.jpg";
import leThiThuThanhAvatar from "../assets/le_thi_thu_thanh_avatar.jpg";
interface TutorMatch {
  id: string
  name: string
  avatar: string
  subjects: string[]
  location: string
  distance: number // in km
  rating: number
  experience: string
  price: string
  availability: string[]
  matchScore: number
  whyFit: string[]
  bio: string
  education: string
  specialties: string[]
  responseTime: string
  completedLessons: number
}

interface UserPreferences {
  subject: string
  location: string
  budget: string
  schedule: string[]
  learningStyle: string
}

interface AIConnectPageProps {
  userLocation?: { lat: number; lng: number; address: string }
}

export default function AIConnectPage({}: AIConnectPageProps) {
  const [currentTutor, setCurrentTutor] = useState<TutorMatch | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [userPreferences] = useState<UserPreferences>({
    subject: "SWP",
    location: "H√≤a L·∫°c, H√† N·ªôi",
    budget: "1000000-1500000",
    schedule: ["evening"],
    learningStyle: "interactive",
  })
  const [tutorQueue, setTutorQueue] = useState<TutorMatch[]>([])
  const [currentIndex, setCurrentIndex] = useState(0)

  // Mock tutor data
  const mockTutors: TutorMatch[] = [
    {
      id: "tutor1",
      name: "ƒêo√†n Th·ªã M∆°",
      avatar: doNgocMinhAvatar,
      subjects: ["MAS", "MAD", "DAP", "SWP", "PFP"],
      location: "Th·∫°ch Th·∫•t, H√† N·ªôi",
      distance: 2.5,
      rating: 4.9,
      experience: "1 nƒÉm kinh nghi·ªám",
      price: "1.200.000 VNƒê/th√°ng",
      availability: ["Th·ª© 2-6: 18:00-21:00", "Cu·ªëi tu·∫ßn: 14:00-18:00"],
      matchScore: 95,
      whyFit: [
        "Sinh vi√™n xu·∫•t s·∫Øc",
        "G·∫ßn v·ªã tr√≠ c·ªßa b·∫°n ch·ªâ 2.5km",
        "Phong c√°ch d·∫°y t∆∞∆°ng t√°c ph√π h·ª£p",
        "Th·ªùi gian r·∫£nh tr√πng v·ªõi l·ªãch h·ªçc c·ªßa b·∫°n",
        "M·ª©c gi√° trong t·∫ßm ng√¢n s√°ch",
      ],
      bio: "T√¥i l√† sinh vi√™n nƒÉm cu·ªëi ng√†nh K·ªπ thu·∫≠t ph·∫ßn m·ªÅm t·∫°i FPT University. C√≥ kinh nghi·ªám 1 nƒÉm d·∫°y k√®m c√°c m√¥n l·∫≠p tr√¨nh, ƒë·∫∑c bi·ªát l√† SWP v√† PRJ. T√¥i lu√¥n t·∫°o kh√¥ng kh√≠ h·ªçc t·∫≠p tho·∫£i m√°i v√† hi·ªáu qu·∫£.",
      education: "FPT University - K·ªπ thu·∫≠t ph·∫ßn m·ªÅm",
      specialties: ["Java", "Spring Boot", "Database Design", "Project Management"],
      responseTime: "Th∆∞·ªùng ph·∫£n h·ªìi trong 15 ph√∫t",
      completedLessons: 3,
    },
    {
      id: "tutor2",
      name: "Ki·ªÅu B·∫£o Tr√¢m",
      avatar: kieuBaoTramAvatar,
      subjects: ["JPN", "MLN"],
      location: "C·∫ßu Gi·∫•y, H√† N·ªôi",
      distance: 8.2,
      rating: 4.8,
      experience: "2 nƒÉm kinh nghi·ªám",
      price: "1.100.000 VNƒê/th√°ng",
      availability: ["Th·ª© 3,5,7: 19:00-22:00", "Ch·ªß nh·∫≠t: 15:00-19:00"],
      matchScore: 87,
      whyFit: [
        "Chuy√™n v·ªÅ Mobile App Development",
        "Ph∆∞∆°ng ph√°p d·∫°y th·ª±c h√†nh cao",
        "ƒê√°nh gi√° t·ªët t·ª´ h·ªçc vi√™n tr∆∞·ªõc",
        "Linh ho·∫°t v·ªÅ th·ªùi gian h·ªçc",
      ],
      bio: "Chuy√™n gia ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông v·ªõi 2 nƒÉm kinh nghi·ªám. T√¥i t·∫≠p trung v√†o vi·ªác d·∫°y th√¥ng qua c√°c d·ª± √°n th·ª±c t·∫ø, gi√∫p h·ªçc vi√™n n·∫Øm v·ªØng ki·∫øn th·ª©c v√† ·ª©ng d·ª•ng v√†o c√¥ng vi·ªác.",
      education: "FPT University - K·ªπ thu·∫≠t ph·∫ßn m·ªÅm",
      specialties: ["Android Development", "iOS Development", "React Native", "UI/UX Design"],
      responseTime: "Th∆∞·ªùng ph·∫£n h·ªìi trong 30 ph√∫t",
      completedLessons: 2,
    },
    {
      id: "tutor3",
      name: "L√™ Th·ªã Thu Thanh",
      avatar: leThiThuThanhAvatar,
      subjects: ["DPL", "NLP"],
      location: "M·ªπ ƒê√¨nh, H√† N·ªôi",
      distance: 3.5,
      rating: 4.9,
      experience: "Sinh vi√™n xu·∫•t s·∫Øc",
      price: "1.400.000 VNƒê/th√°ng",
      availability: ["Th·ª© 2,4,6: 20:00-22:30", "Th·ª© 7: 16:00-20:00"],
      matchScore: 82,
      whyFit: [
        "Chuy√™n s√¢u v·ªÅ Database v√† Backend",
        "Kinh nghi·ªám l√†m vi·ªác th·ª±c t·∫ø t·∫°i c√¥ng ty",
        "Ph∆∞∆°ng ph√°p d·∫°y c√≥ h·ªá th·ªëng",
        "H·ªó tr·ª£ t·∫≠n t√¨nh sau gi·ªù h·ªçc",
      ],
      bio: "Backend Developer v·ªõi 4 nƒÉm kinh nghi·ªám t·∫°i c√°c c√¥ng ty c√¥ng ngh·ªá. T√¥i c√≥ th·ªÉ chia s·∫ª kinh nghi·ªám th·ª±c t·∫ø v√† gi√∫p h·ªçc vi√™n chu·∫©n b·ªã t·ªët cho c√¥ng vi·ªác sau n√†y.",
      education: "FPT University - K·ªπ thu·∫≠t ph·∫ßn m·ªÅm",
      specialties: ["Database Design", "SQL Server", "C# .NET", "Web API"],
      responseTime: "Th∆∞·ªùng ph·∫£n h·ªìi trong 1 gi·ªù",
      completedLessons: 4,
    },
  ]

  useEffect(() => {
    // Simulate AI matching process
    setIsLoading(true)
    setTimeout(() => {
      // Sort tutors by match score
      const sortedTutors = [...mockTutors].sort((a, b) => b.matchScore - a.matchScore)
      setTutorQueue(sortedTutors)
      setCurrentTutor(sortedTutors[0])
      setIsLoading(false)
    }, 2000)
  }, [userPreferences])

  const handleNextTutor = () => {
    const nextIndex = (currentIndex + 1) % tutorQueue.length
    setCurrentIndex(nextIndex)
    setCurrentTutor(tutorQueue[nextIndex])
  }

  const handlePreviousTutor = () => {
    const prevIndex = currentIndex === 0 ? tutorQueue.length - 1 : currentIndex - 1
    setCurrentIndex(prevIndex)
    setCurrentTutor(tutorQueue[prevIndex])
  }

  const handleContactTutor = () => {
    if (currentTutor) {
      // Navigate to contact page or show contact modal
      alert(
        `Li√™n h·ªá v·ªõi ${currentTutor.name}!\nS·ªë ƒëi·ªán tho·∫°i: 0987654321\nEmail: ${currentTutor.name.toLowerCase().replace(/\s+/g, "")}@email.com`,
      )
    }
  }

  const getDistanceColor = (distance: number) => {
    if (distance <= 5) return "#10b981" // green
    if (distance <= 10) return "#f59e0b" // yellow
    return "#ef4444" // red
  }

  const getMatchScoreColor = (score: number) => {
    if (score >= 90) return "#10b981"
    if (score >= 80) return "#f59e0b"
    return "#ef4444"
  }

  if (isLoading) {
    return (
      <div className="ai-connect-page">
        <div className="ai-loading">
          <div className="loading-animation">
            <div className="ai-brain">üß†</div>
            <div className="loading-dots">
              <span></span>
              <span></span>
              <span></span>
            </div>
          </div>
          <h2>AI ƒëang t√¨m gia s∆∞ ph√π h·ª£p nh·∫•t...</h2>
          <p>ƒêang ph√¢n t√≠ch h·ªì s∆° v√† t√¨m ki·∫øm gia s∆∞ t·ªët nh·∫•t cho b·∫°n</p>
        </div>
      </div>
    )
  }

  if (!currentTutor) {
    return (
      <div className="ai-connect-page">
        <div className="no-tutors">
          <div className="no-tutors-icon">üòî</div>
          <h2>Kh√¥ng t√¨m th·∫•y gia s∆∞ ph√π h·ª£p</h2>
          <p>H√£y th·ª≠ ƒëi·ªÅu ch·ªânh ti√™u ch√≠ t√¨m ki·∫øm c·ªßa b·∫°n</p>
        </div>
      </div>
    )
  }

  return (
    <div className="ai-connect-page">
      {/* Header */}
      <div className="ai-header">
        <div className="header-content">
          <h1 className="ai-title">AI K·∫øt N·ªëi Gia S∆∞</h1>

          <div className="match-indicator">
            <div className="match-score" style={{ color: getMatchScoreColor(currentTutor.matchScore) }}>
              {currentTutor.matchScore}% ph√π h·ª£p
            </div>
            <div className="tutor-counter">
              {currentIndex + 1} / {tutorQueue.length}
            </div>
          </div>
        </div>
      </div>

      {/* Tutor Card */}
      <div className="tutor-showcase">
        <div className="tutor-card-ai">
          {/* Tutor Header */}
          <div className="tutor-header">
            <div className="tutor-avatar-section">
              <img
                src={currentTutor.avatar || "/placeholder.svg"}
                alt={currentTutor.name}
                className="tutor-avatar-large"
              />
              <div className="rating-badge">‚≠ê {currentTutor.rating}</div>
            </div>
            <div className="tutor-basic-info">
              <h2 className="tutor-name-large">{currentTutor.name}</h2>
              <p className="tutor-experience">{currentTutor.experience}</p>
              <p className="tutor-education">{currentTutor.education}</p>
              <div className="subjects-tags">
                {currentTutor.subjects.map((subject, index) => (
                  <span key={index} className="subject-tag-ai">
                    {subject}
                  </span>
                ))}
              </div>
            </div>
          </div>

          {/* Location & Distance */}
          <div className="location-section">
            <div className="location-info">
              <div className="location-item">
                <span className="location-icon">üìç</span>
                <div className="location-details">
                  <span className="location-label">V·ªã tr√≠ gia s∆∞:</span>
                  <span className="location-value">{currentTutor.location}</span>
                </div>
              </div>
              <div className="distance-item">
                <span className="distance-icon">üöó</span>
                <div className="distance-details">
                  <span className="distance-label">Kho·∫£ng c√°ch:</span>
                  <span className="distance-value" style={{ color: getDistanceColor(currentTutor.distance) }}>
                    {currentTutor.distance} km
                  </span>
                </div>
              </div>
            </div>
          </div>

          {/* Why This Tutor Fits */}
          <div className="fit-reasons">
            <h3 className="fit-title">üéØ T·∫°i sao ph√π h·ª£p v·ªõi b·∫°n?</h3>
            <div className="reasons-list">
              {currentTutor.whyFit.map((reason, index) => (
                <div key={index} className="reason-item">
                  <span className="reason-check">‚úÖ</span>
                  <span className="reason-text">{reason}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Tutor Details */}
          <div className="tutor-details">
            <div className="detail-section">
              <h4>üí∞ H·ªçc ph√≠</h4>
              <p className="price-info">{currentTutor.price}</p>
            </div>

            <div className="detail-section">
              <h4>‚è∞ Th·ªùi gian r·∫£nh</h4>
              <div className="availability-list">
                {currentTutor.availability.map((time, index) => (
                  <span key={index} className="availability-item">
                    {time}
                  </span>
                ))}
              </div>
            </div>

            <div className="detail-section">
              <h4>üéì Chuy√™n m√¥n</h4>
              <div className="specialties-list">
                {currentTutor.specialties.map((specialty, index) => (
                  <span key={index} className="specialty-tag">
                    {specialty}
                  </span>
                ))}
              </div>
            </div>

            <div className="detail-section">
              <h4>üìù Gi·ªõi thi·ªáu</h4>
              <p className="tutor-bio">{currentTutor.bio}</p>
            </div>

            <div className="stats-section">
              <div className="stat-item">
                <span className="stat-icon">üìö</span>
                <div className="stat-content">
                  <span className="stat-number">{currentTutor.completedLessons}</span>
                  <span className="stat-label">Bu·ªïi h·ªçc ho√†n th√†nh</span>
                </div>
              </div>
              <div className="stat-item">
                <span className="stat-icon">‚ö°</span>
                <div className="stat-content">
                  <span className="stat-text">{currentTutor.responseTime}</span>
                </div>
              </div>
            </div>
          </div>

          {/* Actions */}
          <div className="tutor-actions">
            <button className="action-btn secondary" onClick={handlePreviousTutor}>
              ‚Üê Gia s∆∞ tr∆∞·ªõc
            </button>
            <button className="action-btn primary" onClick={handleContactTutor}>
              üí¨ Li√™n h·ªá ngay
            </button>
            <button className="action-btn secondary" onClick={handleNextTutor}>
              Gia s∆∞ ti·∫øp theo ‚Üí
            </button>
          </div>
        </div>

        {/* Side Panel */}
        <div className="side-panel">
          <div className="preferences-card">
            <h3>üéØ Ti√™u ch√≠ c·ªßa b·∫°n</h3>
            <div className="preference-item">
              <span className="pref-label">M√¥n h·ªçc:</span>
              <span className="pref-value">{userPreferences.subject}</span>
            </div>
            <div className="preference-item">
              <span className="pref-label">Khu v·ª±c:</span>
              <span className="pref-value">{userPreferences.location}</span>
            </div>
            <div className="preference-item">
              <span className="pref-label">Ng√¢n s√°ch:</span>
              <span className="pref-value">1-1.5 tri·ªáu VNƒê</span>
            </div>
          </div>

          <div className="quick-actions">
            <Link to="/new-class" className="quick-action-btn">
              üìö T√¨m l·ªõp h·ªçc kh√°c
            </Link>
            <Link to="/tutors" className="quick-action-btn">
              üë• Xem t·∫•t c·∫£ gia s∆∞
            </Link>
            <Link to="/promotion" className="quick-action-btn">
              üéÅ Xem ∆∞u ƒë√£i
            </Link>
          </div>
        </div>
      </div>
    </div>
  )
}
